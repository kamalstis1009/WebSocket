package com.picknsave.websocket;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.content.Intent;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;

import java.util.Arrays;

import ua.naiksoftware.stomp.Stomp;
import ua.naiksoftware.stomp.StompClient;
import ua.naiksoftware.stomp.dto.StompCommand;
import ua.naiksoftware.stomp.dto.StompHeader;
import ua.naiksoftware.stomp.dto.StompMessage;

@SuppressWarnings({"FieldCanBeLocal", "ResultOfMethodCallIgnored", "CheckResult"})
public class BroadcastActivity extends AppCompatActivity {
    private Button broadcastButton;
    private Button groupButton;
    private Button chatButton;

    private EditText nameText;
    private Button sendButton;
    private TextView resultText;

    private void init() {
        broadcastButton = findViewById(R.id.broadcast);
        broadcastButton.setEnabled(false);
        groupButton = findViewById(R.id.groups);
        chatButton = findViewById(R.id.chat);
        nameText = findViewById(R.id.name);
        sendButton = findViewById(R.id.send);
        resultText = findViewById(R.id.show);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_broadcast);

        this.init();

        StompClient stompClient = Stomp.over(Stomp.ConnectionProvider.OKHTTP, ConstantKey.SOCKET_SERVER_URL);
        StompUtils.lifecycle(stompClient);
        Toast.makeText(this, "Start connecting to server", Toast.LENGTH_SHORT).show();
        // Connect to WebSocket server
        stompClient.connect();

        // 订阅消息
        Log.i(ConstantKey.TAG, "Subscribe broadcast endpoint to receive response");
        stompClient.topic(ConstantKey.broadcastResponse).subscribe(stompMessage -> {
            JSONObject jsonObject = new JSONObject(stompMessage.getPayload());
            Log.i(ConstantKey.TAG, "Receive: " + stompMessage.getPayload());
            runOnUiThread(() -> {
                try {
                    resultText.append(jsonObject.getString("response") + "\n");
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            });
        });

        sendButton.setOnClickListener(v -> {
            JSONObject jsonObject = new JSONObject();
            try {
                jsonObject.put("name", nameText.getText());
            } catch (JSONException e) {
                e.printStackTrace();
            }

            stompClient.send(new StompMessage(
                    // Stomp command
                    StompCommand.SEND,
                    // Stomp Headers, Send Headers with STOMP
                    // the first header is required, and the other can be customized by ourselves
                    Arrays.asList(
                            new StompHeader(StompHeader.DESTINATION, ConstantKey.broadcast),
                            new StompHeader("authorization", "this is a token generated by your code!")
                    ),
                    // Stomp payload
                    jsonObject.toString())
            ).subscribe();
            nameText.setText("");
        });

        groupButton.setOnClickListener(v -> {
            Intent intent = new Intent();
            intent.setClass(BroadcastActivity.this, GroupActivity.class);
            startActivity(intent);
            this.finish();
        });
        chatButton.setOnClickListener(v -> {
            Intent intent = new Intent();
            intent.setClass(BroadcastActivity.this, ChatActivity.class);
            startActivity(intent);
            this.finish();
        });
    }
}